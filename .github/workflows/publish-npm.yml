name: Publish to NPM

on:
  push:
    branches:
      - main
      - rc
      - beta
      - dev
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build:prod

      - name: Determine version and tag
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          DATE=$(date +'%Y%m%d')

          case $BRANCH_NAME in
            "main")
              NPM_TAG="latest"
              VERSION=$PACKAGE_VERSION
              ;;
            "rc"|"beta"|"dev")
              IDENTIFIER=$BRANCH_NAME
              NPM_TAG=$BRANCH_NAME

              # Find the latest tag matching this package + identifier + date
              LAST_TAG=$(git tag --list "v${PACKAGE_VERSION}-${IDENTIFIER}.${DATE}*" | sort -V | tail -n1)

              if [ -z "$LAST_TAG" ]; then
                RUN_NUMBER=1
              else
                LAST_RUN_NUMBER=$(echo $LAST_TAG | sed -E "s/.*\.${DATE}([0-9]+)$/\1/")
                RUN_NUMBER=$((LAST_RUN_NUMBER+1))
              fi

              VERSION="${PACKAGE_VERSION}-${IDENTIFIER}.${DATE}$(printf "%02d" $RUN_NUMBER)"
              ;;
            *)
              echo "Branch $BRANCH_NAME is not configured for publishing"
              exit 1
              ;;
          esac

          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

          echo "Publishing version $VERSION with tag $NPM_TAG from branch $BRANCH_NAME"

      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version

      - name: Publish to NPM
        run: |
          npm publish --tag ${{ steps.version.outputs.npm_tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Changes
            
            This release includes all changes from the latest stable version.
            
            ### Installation
            ```bash
            npm install sqm@latest
            ```
            
            For full changelog, see the commit history.
          draft: false
          prerelease: false

      - name: Create Pre-release (rc, beta, dev branches)
        if: github.ref != 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: ${{ steps.version.outputs.branch }} v${{ steps.version.outputs.version }}
          body: |
            ## ${{ steps.version.outputs.branch }} Release
            
            This is a pre-release version for testing purposes.
            
            ### Installation
            ```bash
            npm install sqm@${{ steps.version.outputs.npm_tag }}
            ```
            
            **⚠️ Warning**: This is a pre-release version and may contain bugs or incomplete features.
          draft: false
          prerelease: true

      - name: Comment on related issues (main branch only)
        # if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 50
            });

            console.log(`Starting to process commits for issue references...`);
            
            const issueNumbers = new Set();
           

            // Look for issue references in commit messages, excluding merge commits
            commits.forEach(commit => {
              const message = commit.commit.message;
              
              // Skip merge commits to avoid false positives
              if (message.startsWith('Merge pull request') || message.startsWith('Merge branch')) {
                return;
              }
              
              const issuePattern = /#(\d+)/g;
              let match;
              while ((match = issuePattern.exec(message)) !== null) {
                issueNumbers.add(match[1]);
              }
            });
            
            console.log('Will process the following issue numbers:', Array.from(issueNumbers).join(', '));
            // Comment on each referenced issue
            for (const issueNumber of issueNumbers) {
              try {
                // First check if it's actually an issue (not a PR)
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                // Skip if it's a pull request
                if (issue.pull_request) {
                  console.log(`Skipping #${issueNumber} - it's a pull request, not an issue`);
                  continue;
                }
                
                // Skip if issue is already closed
                if (issue.state === 'closed') {
                  console.log(`Skipping #${issueNumber} - issue is already closed`);
                  continue;
                }
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `🎉 This issue has been resolved in version \`${{ steps.version.outputs.version }}\` which is now available on npm!\n\n\`\`\`bash\nnpm install sqm@latest\n\`\`\``
                });
                
                console.log(`Successfully commented on issue #${issueNumber}`);
                
              } catch (error) {
                console.log(`Could not process issue #${issueNumber}: ${error.message}`);
              }
            }

